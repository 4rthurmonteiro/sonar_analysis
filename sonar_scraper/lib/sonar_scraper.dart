import 'dart:io';

import 'package:web_scraper/web_scraper.dart';
import 'package:webdriver/async_io.dart';

Future<String?> getRuleByUrl(String url) async {
  late WebDriver driver;
  late Process process;
  String? content;
  try {
    process = await Process.start('chromedriver', [
      '--port=4444',
      '--url-base=wd/hub',
      '--verbose',
    ], mode: ProcessStartMode.detached);

    driver = await createDriver(
      uri: Uri.parse('http://localhost:4444/wd/hub/'),
      desired: {'browserName': 'chrome'},
    );

    await driver.get(url);
    WebElement buttonToClick = await driver.findElement(
      By.xpath("//h2[contains(text(),'More Info')]"),
    );

    await buttonToClick.click();
    await Future.delayed(Duration(seconds: 1));

    WebElement dynamicContentElement = await driver.findElement(
      By.xpath("//a[contains(text(),'Linter')]"),
    );
    final result = await dynamicContentElement.text;
    content = result.split('-').last.trim();
  } catch (e) {
    print('Erro com WebDriver: $e');
  } finally {
    await driver.quit(closeSession: true);
    process.kill();
    await Future.delayed(Duration(seconds: 1));
  }
  return content;
}

Future<List<String>> getRulesLinks() async {
  final scraper = WebScraper();
  final url = 'https://rules.sonarsource.com/dart/';

  if (await scraper.loadFullURL(url)) {
    final links = scraper.getElement('a', ['href']);
    final rulesLinks =
        links
            .map((link) {
              final href = link['attributes']['href'] as String?;
              if (href != null && href.startsWith('/dart/RSPEC-')) {
                return 'https://rules.sonarsource.com$href';
              }
              return null;
            })
            .whereType<String>()
            .toList();
    return rulesLinks;
  }

  return [];
}

Future<void> updateLinterRules(List<String> rules) async {
  final file = File('../sonar_analysis/lib/sonar_analysis.yaml');
  final content = StringBuffer();

  content.writeln('# This file is generated by sonar_scraper.dart');
  content.writeln('# Do not edit manually.');
  // content.writeln('const List<String> linterRules = [');
  content.writeln('linter:');
  content.writeln('  rules:');

  for (final rule in rules) {
    content.writeln("    - $rule");
  }

  // Documentation is broken for this rule. See https://rules.sonarsource.com/dart/RSPEC-7062
  content.writeln("    - implementation_imports");

  // Documentation is broken for this rule. See https://rules.sonarsource.com/dart/RSPEC-2933/
  content.writeln("    - prefer_final_fields");

  // The scraper is not supporting two rules by link yet. See https://rules.sonarsource.com/dart/RSPEC-6582/
  content.writeln("    - prefer_null_aware_method_calls");

  // The scraper is not supporting two rules by link yet. See https://rules.sonarsource.com/dart/RSPEC-1155/
  content.writeln("    - prefer_is_not_empty");

  await file.writeAsString(content.toString());
}
